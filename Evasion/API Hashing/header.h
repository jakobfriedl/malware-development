#pragma once
#include <windows.h>
#include <stdio.h>
#include "typedefs.h"

/// Macros
#define STATUS_SUCCESS ((NTSTATUS)0x00000000L)
#define OKAY(MSG, ...) printf("[+] "               MSG "\n", ##__VA_ARGS__)
#define OKAY_W(MSG, ...) wprintf(L"[+] "               MSG L"\n", ##__VA_ARGS__)
#define INFO(MSG, ...) printf("[#] "               MSG "\n", ##__VA_ARGS__)
#define INFO_W(MSG, ...) wprintf(L"[#] "               MSG L"\n", ##__VA_ARGS__)
#define WARN(MSG, ...) fprintf(stderr, "[-] "      MSG "\n", ##__VA_ARGS__)
#define WARN_W(MSG, ...) fwprintf(stderr, L"[-] "      MSG L"\n", ##__VA_ARGS__)
#define PRINT_ERROR(FUNCTION_NAME)                                        \
    do {                                                                  \
        fprintf(stderr,                                                   \
                "[!] " FUNCTION_NAME " failed, error: %d. [%s:%d]  \n", \
                GetLastError(), __FILE__, __LINE__);                      \
    } while (0)
#define PRINT_NTERROR(FUNCTION_NAME)                                        \
    do {                                                                  \
        fprintf(stderr,                                                   \
                "[!] " FUNCTION_NAME " failed, error: 0x%X. [%s:%d]  \n", \
                STATUS, __FILE__, __LINE__);                      \
    } while (0)

void PRINT_BYTES(unsigned char* arr, SIZE_T size) {
	printf("\n\t");
	for (SIZE_T i = 0; i < size; ++i) {
		printf("%02X", arr[i]);
		if (i < size - 1) {
			printf(", ");
		}
		if ((i + 1) % 20 == 0) {
			printf("\n\t");
		}
	}
	printf("\n\n");
}

/// Function prototypes
typedef HANDLE (WINAPI* fnOpenProcess) (
	IN DWORD dwDesiredAccess,
	IN BOOL  bInheritHandle,
	IN DWORD dwProcessId
);

typedef LPVOID (WINAPI* fnVirtualAllocEx) (
	IN           HANDLE hProcess,
	IN			 LPVOID lpAddress,
	IN           SIZE_T dwSize,
	IN           DWORD  flAllocationType,
	IN           DWORD  flProtect
);

typedef BOOL (WINAPI* fnWriteProcessMemory) (
	IN  HANDLE  hProcess,
	IN  LPVOID  lpBaseAddress,
	IN  LPCVOID lpBuffer,
	IN  SIZE_T  nSize,
	OUT SIZE_T* lpNumberOfBytesWritten
);

typedef BOOL (WINAPI* fnVirtualProtectEx) (
	IN  HANDLE hProcess,
	IN  LPVOID lpAddress,
	IN  SIZE_T dwSize,
	IN  DWORD  flNewProtect,
	OUT PDWORD lpflOldProtect
);

typedef HANDLE (WINAPI* fnCreateRemoteThread) (
	IN  HANDLE                 hProcess,
	IN  LPSECURITY_ATTRIBUTES  lpThreadAttributes,
	IN  SIZE_T                 dwStackSize,
	IN  LPTHREAD_START_ROUTINE lpStartAddress,
	IN  LPVOID                 lpParameter,
	IN  DWORD                  dwCreationFlags,
	OUT LPDWORD                lpThreadId
);

typedef DWORD (WINAPI* fnWaitForSingleObject) (
	IN HANDLE hHandle,
	IN DWORD  dwMilliseconds
);