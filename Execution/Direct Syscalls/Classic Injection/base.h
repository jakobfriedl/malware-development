#pragma once
#include <windows.h>
#include <stdio.h>
#include "typedefs.h"

// If the following line is set, verbose debug messages are printed to the console windows
//#define DEBUG

/// Macros
#define STATUS_SUCCESS ((NTSTATUS)0x00000000L)

#ifdef DEBUG
// The following macros can be used to display debugging information. 
// The messages are only shown if DEBUG mode is enabled.

#define OKAY(MSG, ...) printf("[+] " MSG "\n", ##__VA_ARGS__)
#define OKAY_W(MSG, ...) wprintf(L"[+] " MSG L"\n", ##__VA_ARGS__)
#define INFO(MSG, ...) printf("[#] " MSG "\n", ##__VA_ARGS__)
#define INFO_W(MSG, ...) wprintf(L"[#] " MSG L"\n", ##__VA_ARGS__)
#define WARN(MSG, ...) fprintf(stderr, "[-] " MSG "\n", ##__VA_ARGS__)
#define WARN_W(MSG, ...) fwprintf(stderr, L"[-] " MSG L"\n", ##__VA_ARGS__)
#define PRINT_ERROR(FUNCTION_NAME)                                        \
    do {                                                                  \
        fprintf(stderr,                                                   \
                "[!] " FUNCTION_NAME " failed, error: %d. [%s:%d]  \n",   \
                GetLastError(), __FILE__, __LINE__);                      \
    } while (0)
#define PRINT_NTERROR(FUNCTION_NAME)                                      \
    do {                                                                  \
        fprintf(stderr,                                                   \
                "[!] " FUNCTION_NAME " failed, error: 0x%X. [%s:%d]  \n", \
                STATUS, __FILE__, __LINE__);                              \
    } while (0)

#endif 

#ifndef DEBUG
// The following macros will be deleted by the preprocessor, since they include no code. 
// This enables the use of the macros in debug mode, but they will not contain strings that are visible in the binary.

#define OKAY(MSG, ...) 
#define OKAY_W(MSG, ...)
#define INFO(MSG, ...)
#define INFO_W(MSG, ...)
#define WARN(MSG, ...) 
#define WARN_W(MSG, ...) 
#define PRINT_ERROR(FUNCTION_NAME)                                        
#define PRINT_NTERROR(FUNCTION_NAME)                                       

#endif 

void PRINT_BYTES(unsigned char* arr, SIZE_T size) {
    printf("\n\t");
    for (SIZE_T i = 0; i < size; ++i) {
        printf("%02X", arr[i]);
        if (i < size - 1) {
            printf(", ");
        }
        if ((i + 1) % 20 == 0) {
            printf("\n\t");
        }
    }
    printf("\n\n");
}

// API hashes
#define ntdll_HASH 0xC6392B1C
#define NtAllocateVirtualMemory_HASH 0xF30A976E
#define NtWriteVirtualMemory_HASH 0x900DEFF4
#define NtProtectVirtualMemory_HASH 0x755206E8
#define NtCreateThreadEx_HASH 0xF9E608A1
#define NtWaitForSingleObject_HASH 0x51B47214
#define NtFreeVirtualMemory_HASH 0xE59308A6
#define NtClose_HASH 0x273DEA27
#define NtQuerySystemInformation_HASH 0x3E967EE6