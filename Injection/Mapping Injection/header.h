#pragma once
#include <windows.h>
#include <stdio.h>
#include <Psapi.h>

/// Macros
#define STATUS_SUCCESS ((NTSTATUS)0x00000000L)
#define OKAY(MSG, ...) printf("[+] "               MSG "\n", ##__VA_ARGS__)
#define WOKAY(MSG, ...) wprintf(L"[+] "               MSG L"\n", ##__VA_ARGS__)
#define INFO(MSG, ...) printf("[#] "               MSG "\n", ##__VA_ARGS__)
#define WINFO(MSG, ...) wprintf(L"[#] "               MSG L"\n", ##__VA_ARGS__)
#define WARN(MSG, ...) fprintf(stderr, "[-] "      MSG "\n", ##__VA_ARGS__)
#define WWARN(MSG, ...) fwprintf(stderr, L"[-] "      MSG L"\n", ##__VA_ARGS__)
#define PRINT_ERROR(FUNCTION_NAME)                                        \
    do {                                                                  \
        fprintf(stderr,                                                   \
                "[!] " FUNCTION_NAME " failed, error: %d. [%s:%d]  \n", \
                GetLastError(), __FILE__, __LINE__);                      \
    } while (0)
#define PRINT_NTERROR(FUNCTION_NAME)                                        \
    do {                                                                  \
        fprintf(stderr,                                                   \
                "[!] " FUNCTION_NAME " failed, error: 0x%X. [%s:%d]  \n", \
                STATUS, __FILE__, __LINE__);                      \
    } while (0)

// Encryption
typedef struct
{
	unsigned int i;
	unsigned int j;
	unsigned char s[256];

} Rc4Context;

VOID rc4Init(Rc4Context* context, const unsigned char* key, size_t length);
VOID rc4Cipher(Rc4Context* context, const unsigned char* input, unsigned char* output, size_t length);