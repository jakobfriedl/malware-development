#pragma once
#include <windows.h>
#include <stdio.h>
#include <TlHelp32.h>

/// Debug Macros
#define DLL L"C:\\Users\\MALDEV01\\Desktop\\Tools\\Projects\\DLLInjection\\x64\\Debug\\Dll.dll"

#define OKAY(MSG, ...) printf("[+] "               MSG "\n", ##__VA_ARGS__)
#define INFO(MSG, ...) printf("[#] "               MSG "\n", ##__VA_ARGS__)
#define WARN(MSG, ...) fprintf(stderr, "[-] "      MSG "\n", ##__VA_ARGS__)
#define PRINT_ERROR(FUNCTION_NAME)                                        \
    do {                                                                  \
        fprintf(stderr,                                                   \
                "[!] [" FUNCTION_NAME "] [%s:%d] failed, error: 0x%lx\n", \
                __FILE__, __LINE__, GetLastError());                      \
    } while (0)

/// <summary>
///  This function prints a shellcode array in hex format, e.g:
///  DE AD 12
///  BE AF 23
/// </summary>
/// <param name="arr"> Base address of the payload </param>
/// <param name="size"> Number of bytes in the payload array </param>
void PRINT_BYTES(const unsigned char* arr, size_t size) {
	printf("\n\t");
	for (size_t i = 0; i < size; ++i) {
		printf("%02X", arr[i]);
		if (i < size - 1) {
			printf(" ");
		}
		if ((i + 1) % 20 == 0) {
			printf("\n\t");
		}
	}
	printf("\n\n");
}

/// <summary>
///  This function searches for a supplied process name and fetches the PID and process handle.
/// </summary>
/// <param name="szProcessName"> Name of the remote process </param>
/// <param name="dwProcessId"> Reference to the variable storing the process ID of the found process. </param>
/// <param name="hProcess"> Reference to the variable storing the process handle of the found process. </param>
BOOL GetRemoteProcess(
	IN LPWSTR szProcessName, 
	OUT DWORD* dwProcessId, 
	OUT HANDLE* hProcess
); 

/// <summary>
///  This function injects a DLL into a remote process.
/// </summary>
/// <param name="hProcess"> Handle to the process to inject into </param>
/// <param name="szDllPath"> Full path to the .dll file </param>
/// <param name="szDllPath"> Size of the path of the .dll file </param>
/// <returns></returns>
BOOL InjectDll(
	IN HANDLE hProcess,
	IN LPCWSTR szDllPath,
	IN CONST SIZE_T sSize
); 